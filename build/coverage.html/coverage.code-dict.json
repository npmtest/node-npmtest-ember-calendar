{"/home/travis/build/npmtest/node-npmtest-ember-calendar/test.js":"/* istanbul instrument in package npmtest_ember_calendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/lib.npmtest_ember_calendar.js":"/* istanbul instrument in package npmtest_ember_calendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_calendar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_calendar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-calendar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_calendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_calendar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_calendar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_calendar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_calendar.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_calendar.__dirname + '/lib.npmtest_ember_calendar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/index.js":"/* jshint node: true */\n'use strict';\n\nvar path = require('path');\n\nmodule.exports = {\n  name: 'ember-calendar',\n\n  included: function(app) {\n    this._super.included(app);\n\n    var options = app.options.emberCalendar || {};\n\n    if (!('includeFontAwesomeAssets' in options)) {\n      options.includeFontAwesomeAssets = true;\n    }\n\n    app.import(path.join(app.bowerDirectory, 'lodash/lodash.js'));\n    app.import(path.join(app.bowerDirectory, 'interact/interact.js'));\n\n    if (options.includeFontAwesomeAssets) {\n      app.import(path.join(app.bowerDirectory, 'fontawesome/fonts/fontawesome-webfont.ttf'), {\n        destDir: 'fonts'\n      });\n\n      app.import(path.join(app.bowerDirectory, 'fontawesome/fonts/fontawesome-webfont.woff'), {\n        destDir: 'fonts'\n      });\n\n      app.import(path.join(app.bowerDirectory, 'fontawesome/fonts/fontawesome-webfont.woff2'), {\n        destDir: 'fonts'\n      });\n\n      app.import(path.join(app.bowerDirectory, 'fontawesome/fonts/fontawesome-webfont.svg'), {\n        destDir: 'fonts'\n      });\n\n      app.import(path.join(app.bowerDirectory, 'fontawesome/fonts/fontawesome-webfont.eot'), {\n        destDir: 'fonts'\n      });\n    }\n\n    app.import('vendor/ember-calendar/lodash.js', {\n      type: 'vendor',\n      exports: { 'lodash': ['default'] }\n    });\n\n    app.import('vendor/ember-calendar/jstz.js', {\n      type: 'vendor',\n      exports: { 'jstz': ['default'] }\n    });\n\n    app.import('vendor/ember-calendar/interact.js', {\n      type: 'vendor',\n      exports: { 'interact': ['default'] }\n    });\n\n    app.import('vendor/jstz.js', {\n      type: 'vendor'\n    });\n\n    if (app.env === 'test') {\n      app.import(path.join(app.bowerDirectory, 'jquery-simulate/jquery.simulate.js'), {\n        type: 'test'\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/config/ember-try.js":"/*jshint node:true*/\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release'\n      },\n      resolutions: {\n        'ember': 'release'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return {\n    moment: {\n      includeTimezone: 'all'\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/components/as-calendar.js":"import jstz from 'jstz';\nimport Ember from 'ember';\nimport ComponentCalendar from 'ember-calendar/models/component-calendar';\nimport InboundActionsMixin from 'ember-component-inbound-actions/inbound-actions';\n\nexport default Ember.Component.extend(InboundActionsMixin, {\n  classNameBindings: [':as-calendar'],\n  tagName: 'section',\n\n  dayEndingTime: '22:00',\n  dayStartingTime: '8:00',\n  defaultOccurrenceDuration: '1:00',\n  defaultOccurrenceTitle: 'New event',\n  defaultTimeZoneQuery: '',\n  isEditing: true,\n  model: null,\n  occurrences: null,\n  showHeader: true,\n  showTimeZoneSearch: true,\n  startingDate: null,\n  timeSlotDuration: '00:30',\n  timeSlotHeight: 20,\n  timeZone: jstz.determine().name(),\n  title: null,\n\n  _initializeModel: Ember.on('init', function() {\n    this.set('model', ComponentCalendar.create({ component: this }));\n  }),\n\n  actions: {\n    changeTimeZone: function(timeZone) {\n      this.set('timeZone', timeZone);\n    },\n\n    addOccurrence: function(time) {\n      var occurrence = this.get('model').createOccurrence({\n        startsAt: time.toDate()\n      });\n\n      this.attrs['onAddOccurrence'](occurrence.get('content'));\n    },\n\n    onNavigateWeek: function(index) {\n      if (this.attrs['onNavigateWeek']) {\n        this.attrs['onNavigateWeek'](index);\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/macros/computed-duration.js":"import moment from 'moment';\nimport Ember from 'ember';\n\nexport default function(dependentKey) {\n  return Ember.computed(dependentKey, function() {\n    var dependentValue = this.get(dependentKey);\n\n    if (dependentValue != null) {\n      return moment.duration(dependentValue);\n    } else {\n      return null;\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/macros/computed-moment.js":"import moment from 'moment';\nimport Ember from 'ember';\n\nexport default function(dependentKey) {\n  return Ember.computed(dependentKey, {\n    get() {\n      var dependentValue = this.get(dependentKey);\n\n      if (dependentValue != null) {\n        return moment(dependentValue);\n      } else {\n        return null;\n      }\n    },\n\n    set(_, value) {\n      if (value != null) {\n        this.set(dependentKey, value.toDate());\n      } else {\n        this.set(dependentKey, null);\n      }\n\n      return value;\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/models/calendar.js":"import Ember from 'ember';\nimport moment from 'moment';\nimport TimeSlot from './time-slot';\nimport Day from './day';\nimport OccurrenceProxy from './occurrence-proxy';\n\nexport default Ember.Object.extend({\n  dayEndingTime: null,\n  dayStartingTime: null,\n  occurrences: null,\n  startingDate: null,\n  timeSlotDuration: null,\n  timeZone: null,\n  occurrencePreview: null,\n\n  isInCurrentWeek: Ember.computed('week', '_currentWeek', function() {\n    return this.get('week').isSame(this.get('_currentWeek'));\n  }),\n\n  timeSlots: Ember.computed(\n    'timeZone',\n    'dayStartingTime',\n    'dayEndingTime',\n    'timeSlotDuration', function() {\n    return TimeSlot.buildDay({\n      timeZone: this.get('timeZone'),\n      startingTime: this.get('dayStartingTime'),\n      endingTime: this.get('dayEndingTime'),\n      duration: this.get('timeSlotDuration')\n    });\n  }),\n\n  days: Ember.computed(function() {\n    return Day.buildWeek({ calendar: this });\n  }),\n\n  week: Ember.computed('startingTime', 'timeZone', function() {\n    return moment(this.get('startingTime')).tz(this.get('timeZone')).startOf('isoWeek');\n  }),\n\n  _currentWeek: Ember.computed('timeZone', function() {\n    return moment().tz(this.get('timeZone')).startOf('isoWeek');\n  }),\n\n  initializeCalendar: Ember.on('init', function() {\n    if (this.get('startingTime') == null) {\n      this.goToCurrentWeek();\n    }\n  }),\n\n  createOccurrence: function(options) {\n    var content = Ember.merge({\n      endsAt: moment(options.startsAt)\n        .add(this.get('defaultOccurrenceDuration')).toDate(),\n\n      title: this.get('defaultOccurrenceTitle')\n    }, options);\n\n    return OccurrenceProxy.create({\n      calendar: this,\n      content: Ember.Object.create(content)\n    });\n  },\n\n  navigateWeek: function(index) {\n    this.set('startingTime', moment(this.get('startingTime')).add(index, 'weeks'));\n  },\n\n  goToCurrentWeek: function() {\n    this.set('startingTime', moment());\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/models/component-calendar.js":"import Ember from 'ember';\nimport computedMoment from 'ember-calendar/macros/computed-moment';\nimport computedDuration from 'ember-calendar/macros/computed-duration';\nimport Calendar from './calendar';\nimport OccurrenceProxy from './occurrence-proxy';\n\nexport default Calendar.extend({\n  component: null,\n  timeZone: Ember.computed.oneWay('component.timeZone'),\n  startingTime: computedMoment('component.startingDate'),\n  dayStartingTime: computedDuration('component.dayStartingTime'),\n  dayEndingTime: computedDuration('component.dayEndingTime'),\n  timeSlotDuration: computedDuration('component.timeSlotDuration'),\n\n  defaultOccurrenceTitle: Ember.computed.oneWay(\n    'component.defaultOccurrenceTitle'\n  ),\n\n  defaultOccurrenceDuration: computedDuration(\n    'component.defaultOccurrenceDuration'\n  ),\n\n  occurrences: Ember.computed('component.occurrences.[]', function() {\n    return this.get('component.occurrences').map((occurrence) => {\n      return OccurrenceProxy.create({ calendar: this, content: occurrence });\n    });\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/models/day.js":"import _ from 'lodash';\nimport moment from 'moment';\nimport Ember from 'ember';\n\nvar Day = Ember.Object.extend({\n  calendar: null,\n  offset: 0,\n\n  value: Ember.computed('_week', 'offset', function() {\n    return moment(this.get('_week')).add(this.get('offset'), 'day');\n  }),\n\n  occurrences: Ember.computed(\n    'calendar.occurrences.@each.startingTime',\n    'startingTime',\n    'endingTime', function() {\n    return this.get('calendar.occurrences').filter((occurrence) => {\n      var startingTime = occurrence.get('startingTime');\n\n      return startingTime >= this.get('startingTime') &&\n             startingTime <= this.get('endingTime');\n    });\n  }),\n\n  occurrencePreview: Ember.computed(\n    'calendar.occurrencePreview.startingTime',\n    'startingTime',\n    'endingTime', function() {\n    var occurrencePreview = this.get('calendar.occurrencePreview');\n\n    if (occurrencePreview != null) {\n      var startingTime = occurrencePreview.get('startingTime');\n\n      if (startingTime >= this.get('startingTime') &&\n          startingTime <= this.get('endingTime')) {\n        return occurrencePreview;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }),\n\n  startingTime: Ember.computed(\n    'value',\n    '_timeSlots.firstObject.time', function() {\n    return moment(this.get('value'))\n      .add(this.get('_timeSlots.firstObject.time'));\n  }),\n\n  endingTime: Ember.computed(\n    'value',\n    '_timeSlots.lastObject.endingTime', function() {\n    return moment(this.get('value'))\n      .add(this.get('_timeSlots.lastObject.endingTime'));\n  }),\n\n  isToday: Ember.computed('value', function() {\n    return this.get('value').isSame(moment(), 'day');\n  }),\n\n  _week: Ember.computed.oneWay('calendar.week'),\n  _timeSlots: Ember.computed.oneWay('calendar.timeSlots')\n});\n\nDay.reopenClass({\n  buildWeek: function(options) {\n    return Ember.A(_.range(0, 7).map(function(dayOffset) {\n      return Day.create({\n        calendar: options.calendar,\n        offset: dayOffset\n      });\n    }));\n  }\n});\n\nexport default Day;\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/models/occurrence-proxy.js":"import Ember from 'ember';\nimport moment from 'moment';\nimport computedMoment from 'ember-calendar/macros/computed-moment';\nimport Day from './day';\n\nvar OccurrenceProxy = Ember.Object.extend(Ember.Copyable, {\n  calendar: null,\n  content: null,\n  endingTime: computedMoment('content.endsAt'),\n  startingTime: computedMoment('content.startsAt'),\n  title: Ember.computed.oneWay('content.title'),\n\n  duration: Ember.computed('startingTime', 'endingTime', function() {\n    return moment.duration(\n      this.get('endingTime').diff(this.get('startingTime'))\n    );\n  }),\n\n  day: Ember.computed('startingTime', 'calendar', function() {\n    return Day.create({\n      calendar: this.get('calendar'),\n      offset: this.get('startingTime').isoWeekday() - 1\n    });\n  }),\n\n  copy: function() {\n    return OccurrenceProxy.create({\n      calendar: this.get('calendar'),\n\n      content: Ember.Object.create({\n        startsAt: this.get('content.startsAt'),\n        endsAt: this.get('content.endsAt'),\n        title: this.get('content.title')\n      })\n    });\n  }\n});\n\nexport default OccurrenceProxy;\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/models/time-slot.js":"import moment from 'moment';\nimport Ember from 'ember';\n\nvar TimeSlot = Ember.Object.extend({\n  duration: null,\n  time: null,\n  timeZone: null,\n\n  endingTime: Ember.computed('time', 'duration', function() {\n    return moment.duration(this.get('time')).add(this.get('duration'));\n  }),\n\n  day: Ember.computed('timeZone', function() {\n    return moment().tz(this.get('timeZone')).startOf('day');\n  }),\n\n  value: Ember.computed('day', 'time', function() {\n    return moment(this.get('day')).add(this.get('time'));\n  }),\n\n  endingValue: Ember.computed('day', 'endingTime', function() {\n    return moment(this.get('day')).add(this.get('endingTime'));\n  }),\n\n  isInRange: function(startingTime, endingTime) {\n    var value = this.get('value');\n    var day = this.get('day');\n\n    return value >= moment(day).add(startingTime) &&\n           this.get('endingValue') <= moment(day).add(endingTime);\n  },\n\n  next: function() {\n    var duration = this.get('duration');\n\n    return TimeSlot.create({\n      timeZone: this.get('timeZone'),\n      time: moment.duration(this.get('time')).add(duration),\n      duration: duration\n    });\n  }\n});\n\nTimeSlot.reopenClass({\n  buildDay: function(options) {\n    var timeSlots = Ember.A();\n\n    var currentTimeSlot = this.create({\n      timeZone: options.timeZone,\n      time: options.startingTime,\n      duration: options.duration\n    });\n\n    while (currentTimeSlot.isInRange(\n      options.startingTime,\n      options.endingTime\n    )) {\n      timeSlots.pushObject(currentTimeSlot);\n      currentTimeSlot = currentTimeSlot.next();\n    }\n\n    return timeSlots;\n  }\n});\n\nexport default TimeSlot;\n","/home/travis/build/npmtest/node-npmtest-ember-calendar/node_modules/ember-calendar/addon/models/time-zone-option.js":"import moment from 'moment';\nimport Ember from 'ember';\n\nexport default Ember.Object.extend({\n  value: null,\n\n  description: Ember.computed('value', function() {\n    return `${this.get('_title')}\n            (${this.get('_offset')}\n            ${this.get('abbreviation')})`;\n  }),\n\n  abbreviation: Ember.computed('value', function() {\n    return moment().tz(this.get('value')).format('z');\n  }),\n\n  _title: Ember.computed('value', function() {\n    return this.get('value').replace('_', ' ');\n  }),\n\n  _offset: Ember.computed('value', function() {\n    return moment().tz(this.get('value')).format('Z');\n  })\n});\n"}